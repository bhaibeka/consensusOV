gs_key(extract_key_from_url("https://docs.google.com/spreadsheets/d/1vSe9pLzvAre6geRtqKbJLDmh5oJqIXyOz1_KSmhKOcY"))
gs_key(extract_key_from_url("https://docs.google.com/spreadsheets/d/1IjT1NnIGwrYYIepIbF1Wg9WzDNNBKETyJeVufCtx3SI"))
gs_key(extract_key_from_url("https://docs.google.com/spreadsheets/d/1IjT1NnIGwrYYIepIbF1Wg9WzDNNBKETyJeVufCtx3SI"))
course.urls <- c("https://docs.google.com/spreadsheets/d/1vSe9pLzvAre6geRtqKbJLDmh5oJqIXyOz1_KSmhKOcY",
"https://docs.google.com/spreadsheets/d/13JzVU2X-Jp8-meMB23srn2q82FCprouTQxVDumBfIXg",
"https://docs.google.com/spreadsheets/d/1IjT1NnIGwrYYIepIbF1Wg9WzDNNBKETyJeVufCtx3SI",
"https://docs.google.com/spreadsheets/d/1xQ3gjE9tUce2t4_zVQfdydOlGjnOdr00PxXhKJaJSbg")
googlesheets_keys <- lapply(course.urls, extract_key_from_url)
googlesheets_GS <- lapply(googlesheets_keys, gs_key)
gs_key(extract_key_from_url("https://docs.google.com/spreadsheets/d/13JzVU2X-Jp8-meMB23srn2q82FCprouTQxVDumBfIXg"))
gs_key(extract_key_from_url("https://docs.google.com/spreadsheets/d/1IjT1NnIGwrYYIepIbF1Wg9WzDNNBKETyJeVufCtx3SI"))
gs_key(extract_key_from_url("https://docs.google.com/spreadsheets/d/1xQ3gjE9tUce2t4_zVQfdydOlGjnOdr00PxXhKJaJSbg"))
extract_key_from_url("https://docs.google.com/spreadsheets/d/1xQ3gjE9tUce2t4_zVQfdydOlGjnOdr00PxXhKJaJSbg")
extract_key_from_url("https://docs.google.com/spreadsheets/d/1xQ3gjE9tUce2t4_zVQfdydOlGjnOdr00PxXhKJaJSbg/edit?usp=sharing")
gs_key(extract_key_from_url("https://docs.google.com/spreadsheets/d/1xQ3gjE9tUce2t4_zVQfdydOlGjnOdr00PxXhKJaJSbg/edit?usp=sharing"))
devtools::install_github("jennybc/googlesheets")
install.packages("xml2")
library(stringr)
library(RCurl)
library(googlesheets)
courses <- c("Biochemistry", "Cell and Tissue Biology", "Embryology", "Genetics")
course.abbreviations <- c("Biochem", "CTB", "Embryo", "Genetics")
course.urls <- c("https://docs.google.com/spreadsheets/d/1vSe9pLzvAre6geRtqKbJLDmh5oJqIXyOz1_KSmhKOcY",
"https://docs.google.com/spreadsheets/d/13JzVU2X-Jp8-meMB23srn2q82FCprouTQxVDumBfIXg",
"https://docs.google.com/spreadsheets/d/1IjT1NnIGwrYYIepIbF1Wg9WzDNNBKETyJeVufCtx3SI",
"https://docs.google.com/spreadsheets/d/1xQ3gjE9tUce2t4_zVQfdydOlGjnOdr00PxXhKJaJSbg/edit?usp=sharing")
googlesheets_keys <- lapply(course.urls, extract_key_from_url)
googlesheets_GS <- lapply(googlesheets_keys, gs_key)
library(stringr)
library(RCurl)
library(googlesheets)
courses <- c("Biochemistry", "Cell and Tissue Biology", "Embryology", "Genetics")
course.abbreviations <- c("Biochem", "CTB", "Embryo", "Genetics")
course.urls <- c("https://docs.google.com/spreadsheets/d/1vSe9pLzvAre6geRtqKbJLDmh5oJqIXyOz1_KSmhKOcY",
"https://docs.google.com/spreadsheets/d/13JzVU2X-Jp8-meMB23srn2q82FCprouTQxVDumBfIXg",
"https://docs.google.com/spreadsheets/d/1IjT1NnIGwrYYIepIbF1Wg9WzDNNBKETyJeVufCtx3SI",
"https://docs.google.com/spreadsheets/d/1xQ3gjE9tUce2t4_zVQfdydOlGjnOdr00PxXhKJaJSbg/edit?usp=sharing")
googlesheets_keys <- lapply(course.urls, extract_key_from_url)
googlesheets_GS <- lapply(googlesheets_keys, gs_key)
googlesheets_GS[[2]]$ws$ws_title
library(stringr)
library(RCurl)
library(googlesheets)
courses <- c("Biochemistry", "Cell and Tissue Biology", "Embryology", "Genetics")
course.abbreviations <- c("Biochem", "CTB", "Embryo", "Genetics")
course.urls <- c("https://docs.google.com/spreadsheets/d/1vSe9pLzvAre6geRtqKbJLDmh5oJqIXyOz1_KSmhKOcY",
"https://docs.google.com/spreadsheets/d/13JzVU2X-Jp8-meMB23srn2q82FCprouTQxVDumBfIXg",
"https://docs.google.com/spreadsheets/d/1IjT1NnIGwrYYIepIbF1Wg9WzDNNBKETyJeVufCtx3SI",
"https://docs.google.com/spreadsheets/d/1xQ3gjE9tUce2t4_zVQfdydOlGjnOdr00PxXhKJaJSbg/edit?usp=sharing")
googlesheets_keys <- lapply(course.urls, extract_key_from_url)
googlesheets_GS <- lapply(googlesheets_keys, gs_key)
biochemGS <- googlesheets_GS[[1]]
my.data <- gs_read(biochemGS, ws = 2, col_names=FALSE)
quiz.data <- list(
questions=my.data[,1],
answers=as.vector(sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
my.data[rowindex, !is.na(my.data[rowindex,])][-1]
}))
)
biochemGS <- googlesheets_GS[[1]]
my.data <- gs_read(biochemGS, ws = 2, col_names=FALSE)
my.data <- as.data.frame(my.data)
quiz.data <- list(
questions=my.data[,1],
answers=as.vector(sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
my.data[rowindex, !is.na(my.data[rowindex,])][-1]
}))
)
quiz.data
quiz.data$answers
quiz.data$answers[[2]]
as.vector()
vector()
quiz.data$answers
quiz.data$answers[[1]]
quiz.data$answers[[2]]
?save
courses
courseIndex <- 3
googlesheets_GS[[which(courses == input$selectCourse)]]$ws$ws_title
course_GS <- googlesheets_GS[[courseIndex]]
course_GS
course_GS$ws$ws_title
lectureIndex <- 1:8
quiz.data.list <- lapply(lectureIndex, function(currentLectureIndex) {
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
current.quiz.data <- list(
questions=my.data[,1],
answers=as.vector(sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
my.data[rowindex, !is.na(my.data[rowindex,])][-1]
}))
)
return(current.quiz.data)
})
lectureIndex
length(course_GS$ws$ws_title
)
currentLectureIndex <- 7
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
current.quiz.data <- list(
questions=my.data[,1],
answers=as.vector(sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
my.data[rowindex, !is.na(my.data[rowindex,])][-1]
}))
)
currentLectureIndex <- 8
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
current.quiz.data <- list(
questions=my.data[,1],
answers=as.vector(sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
my.data[rowindex, !is.na(my.data[rowindex,])][-1]
}))
)
course_GS$ws$ws_title
currentLectureIndex <- 6
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
current.quiz.data <- list(
questions=my.data[,1],
answers=as.vector(sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
my.data[rowindex, !is.na(my.data[rowindex,])][-1]
}))
)
my.dat
my.data
quiz.data.list <- lapply(lectureIndex, function(currentLectureIndex) {
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
if(nrow(my.data) == 0) {
return(list(questions=c(), answers=c()))
}
current.quiz.data <- list(
questions=my.data[,1],
answers=as.vector(sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
my.data[rowindex, !is.na(my.data[rowindex,])][-1]
}))
)
return(current.quiz.data)
})
quiz.data <<- unlist(quiz.data.list,recursive=F)
quiz.data
quiz.data
length(quiz.data)
quiz.data.list
sapply(quiz.data.list, length)
quiz.data.list[[1]]
length(quiz.data$questions)
sapply(quiz.data.list, function(x) length(x$questions))
merge(quiz.data.list)
do.call(rbind, quiz.data.list)
do.call(c, quiz.data.list)
length(do.call(c, quiz.data.list))
unlist(quiz.data.list[[1]])
class(unlist(quiz.data.list[[1]]))
unlist(quiz.data.list)
unlist(quiz.data.list[[1]], recursive=FALSE)
?Map
c(quiz.data.list[[1]], quiz.data.list[[2]])
out <- c(quiz.data.list[[1]], quiz.data.list[[2]])
out$questions
quiz.data.list[[1]]$questions
for(currentLectureIndex in lectureIndex) {
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
if(nrow(my.data) == 0) {
return(list(questions=c(), answers=c()))
}
current.questions=my.data[,1]
current.answers=as.vector(sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
my.data[rowindex, !is.na(my.data[rowindex,])][-1]
}))
current.questions <- c(questions, current.questions)
answers <- c(answers, current.answers)
}
quiz.data <<- list(questions=questions, answers=answers)
questions <- c()
answers <- list()
for(currentLectureIndex in lectureIndex) {
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
if(nrow(my.data) == 0) {
return(list(questions=c(), answers=c()))
}
current.questions=my.data[,1]
current.answers=as.vector(sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
my.data[rowindex, !is.na(my.data[rowindex,])][-1]
}))
current.questions <- c(questions, current.questions)
answers <- c(answers, current.answers)
}
quiz.data <<- list(questions=questions, answers=answers)
questions <- c()
answers <- list()
for(currentLectureIndex in lectureIndex) {
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
if(nrow(my.data) == 0) {
next
}
current.questions=my.data[,1]
current.answers=as.vector(sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
my.data[rowindex, !is.na(my.data[rowindex,])][-1]
}))
current.questions <- c(questions, current.questions)
answers <- c(answers, current.answers)
}
quiz.data <<- list(questions=questions, answers=answers)
quiz.data
length(quiz.data)
length(quiz.data$questions)
(quiz.data$questions)
quiz.data$questions
quiz.data$questions
quiz.data$answers
questions <- c()
answers <- list()
for(currentLectureIndex in lectureIndex) {
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
if(nrow(my.data) == 0) {
next
}
current.questions=my.data[,1]
current.answers=as.vector(sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
my.data[rowindex, !is.na(my.data[rowindex,])][-1]
}))
questions <- c(questions, current.questions)
answers <- c(answers, current.answers)
}
quiz.data <<- list(questions=questions, answers=answers)
length(quiz.data$questions)
sample(1:10)
sample(1:1000)
permutation <- sample(1:length(quiz.data$questions))
permutation
quiz.data[permutation]
quiz.data
quiz.data[[permutation]]
quiz.data[1]
quiz.data$questions[permutation]
quiz.data$answers[permutation]
quiz.data$answers[[permutation]]
quiz.data
quiz.data$answers[[137]]
class(quiz.data$answers[[137]])
current.answers
current.answers[[2]]
class(current.answers[[2]])
current.answers=sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
as.vector(my.data[rowindex, !is.na(my.data[rowindex,])][-1])
})
current.answeres
current.answers
current.answers[[4]]
current.answers[[5]]
class(current.answers[[5]])
class(as.vector(current.answers[[5]]))
class(as.character(current.answers[[5]]))
current.answers=sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
as.character(my.data[rowindex, !is.na(my.data[rowindex,])][-1])
})
current.answers[[6]]
current.answers[[5]]
questions <- c()
answers <- list()
for(currentLectureIndex in lectureIndex) {
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
if(nrow(my.data) == 0) {
next
}
current.questions=my.data[,1]
current.answers=sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
as.character(my.data[rowindex, !is.na(my.data[rowindex,])][-1])
})
questions <- c(questions, current.questions)
answers <- c(answers, current.answers)
}
#Randomize the order of questions.
permutation <- sample(1:length(questions))
questions <- questions[permutation]
answers <- answers[permutation]
quiz.data <<- list(questions=questions, answers=answers)
quiz.data
quiz.data$answers[[159]]
questions <- c()
answers <- list()
for(currentLectureIndex in lectureIndex) {
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
if(nrow(my.data) == 0) {
next
}
current.questions=my.data[,1]
current.answers=sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
as.character(my.data[rowindex, !is.na(my.data[rowindex,])][-1])
})
questions <- c(questions, current.questions)
answers <- c(answers, current.answers)
}
#Randomize the order of questions.
permutation <- sample(1:length(questions))
questions <- questions[permutation]
answers <- answers[permutation]
quiz.data <<- list(questions=questions, answers=answers)
quiz.data$answers[[159]]
quiz.data$answers
quiz.data$answers[[160]]
current.answers=sapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
as.character(my.data[rowindex, !is.na(my.data[rowindex,])][-1])
})
current.answers
current.answers=lapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
as.character(my.data[rowindex, !is.na(my.data[rowindex,])][-1])
})
current.answers
courses
courseIndex <- 3
courseIndex <- which(courses == input$selectCourse)
course_GS <- googlesheets_GS[[courseIndex]]
course_GS$ws$ws_title
course_GS <- googlesheets_GS[[1]]
course_GS$ws$ws_title
lectureIndex <- 2
questions <- c()
answers <- list()
for(currentLectureIndex in lectureIndex) {
my.data <- gs_read(course_GS, ws = currentLectureIndex, col_names=FALSE)
my.data <- as.data.frame(my.data)
if(nrow(my.data) == 0) {
next
}
current.questions=my.data[,1]
current.answers=lapply(1:nrow(my.data), function(rowindex) {
# Get all non-NA columns in this row, exclude the question
as.character(my.data[rowindex, !is.na(my.data[rowindex,])][-1])
})
questions <- c(questions, current.questions)
answers <- c(answers, current.answers)
}
#Randomize the order of questions.
permutation <- sample(1:length(questions))
questions <- questions[permutation]
answers <- answers[permutation]
quiz.data <<- list(questions=questions, answers=answers)
quiz.data
string_equals <- function(str1, str2) {
str1 <- toupper(str_replace_all(str1, "[^[:alnum:]]", ""))
str2 <- toupper(str_replace_all(str2, "[^[:alnum:]]", ""))
# make str2 the longer string
if(nchar(str1) > nchar(str2)) {
temp <- str1
str1 <- str2
str2 <- temp
}
# Remove a trailing s if str2 is longer
if(nchar(str2) > nchar(str1) && substr(str2,nchar(str2),nchar(str2)) == "s") {
str2 <- substr(str2, 1, nchar(str2)-1)
}
return(str1 == str2)
}
string_equals("fats", "fat")
library(stringr)
string_equals("fats", "fat")
str1 <- "fats"
str2 <- "fat"
str1 <- toupper(str_replace_all(str1, "[^[:alnum:]]", ""))
str2 <- toupper(str_replace_all(str2, "[^[:alnum:]]", ""))
str1
str2
if(nchar(str1) > nchar(str2)) {
temp <- str1
str1 <- str2
str2 <- temp
}
str1
str2
string_equals <- function(str1, str2) {
str1 <- toupper(str_replace_all(str1, "[^[:alnum:]]", ""))
str2 <- toupper(str_replace_all(str2, "[^[:alnum:]]", ""))
# make str2 the longer string
if(nchar(str1) > nchar(str2)) {
temp <- str1
str1 <- str2
str2 <- temp
}
# Remove a trailing s if str2 is longer
if(nchar(str2) > nchar(str1) && substr(str2,nchar(str2),nchar(str2)) == "S") {
str2 <- substr(str2, 1, nchar(str2)-1)
}
return(str1 == str2)
}
string_equals("fats", "fat")
library(stringr)
library(googlesheets)
courses <- c("Biochemistry", "Cell and Tissue Biology")
course.abbreviations <- c("Biochem", "CTB")
course.urls <- c("https://docs.google.com/spreadsheets/d/19VVcunAWKly-RkuqpqWGkHEzdmZ1AHe6-npZdXTtumU",
"https://docs.google.com/spreadsheets/d/1_6mbLCoE3a_uevVAJwle4MQwxsAcrITRLzzewIe13fg"
)
googlesheets_keys <- lapply(course.urls, extract_key_from_url)
googlesheets_GS <- lapply(googlesheets_keys, gs_key)
googlesheets_GS <- lapply(googlesheets_keys, gs_key)
library(tm)
x=seq(0,2*pi,len=100)
sigma=1
yTrue=0.05*x^2+sin(x)
plot(y, x)
plot(yTrue, x)
plot(x, yTrue)
y=yTrue+rnorm(100,0,sigma)
plot(x, y)
plot(x,y,pch='o')
plot(x, y)
plot(x,y,pch='o')
plot(x,y,pch='o')
lines(x,yTrue,lty=2,lwd=.5,col='red')
mydat=data.frame(x=x,y=y)
dd=datadist(mydat)
??datadist
library(rms)
install.packages("rms")
library(rms)
dd=datadist(mydat)
options(datadist='dd')
fit0=ols(y~x,data=mydat)
anova(fit0)
ff=Predict(fit0)
plot(ff)
lines(x,yTrue,lwd=.5,lty=2,col='red')
points(x,y,pch='.')
x=seq(0,2*pi,len=100)
sigma=1
yTrue=0.05*x^2+sin(x)
y=yTrue+rnorm(100,0,sigma)
plot(x,y,pch='o')
lines(x,yTrue,lty=2,lwd=.5,col='red')
mydat=data.frame(x=x,y=y)
dd=datadist(mydat)
options(datadist='dd')
fit0=ols(y~x,data=mydat)
anova(fit0)
ff=Predict(fit0)
plot(ff)
lines(x,yTrue,lwd=.5,lty=2,col='red')
points(x,y,pch='.')
yTrue=0.05*x^2+sin(x)
ls()
setwd("~/repos/consensusOV/")
library(devtools)
devtools::document()
?devtools
?devtools::document
devtools::document()
devtools::document("~/repos/consensusOV/")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
Biobase::ExpressionSet(
devtools::document()
devtools::document()
?data
getwd()
setwd("data")
load("centroids.konecny.RData")
centroids.konecny
class(centroids.konecny)
load("consensus.training.dataset.full.RData")
consensus.training.dataset.full
load("entrez.id.logFC.list.tothill.RData")
entrez.id.logFC.list.tothill
head(entrez.id.logFC.list.tothill)
class(entrez.id.logFC.list.tothill)
class(entrez.id.logFC.list.tothill$C1)
load("entrez.id.union.RData")
entrez.id.union
head(entrez.id.union)
length(entrez.id.union)
dim(entrez.id.union)
d(entrez.id.union)
entrez.id.union
length(entrez.id.union)
dim(esets.rescaled.classified.filteredgenes)
dim(exprs(esets.rescaled.classified.filteredgenes))
library(Biobase)
dim(esets.rescaled.classified.filteredgenes)
dim(exprs(esets.rescaled.classified.filteredgenes))
dim(exprs(esets.rescaled.classified.filteredgenes$E.MTAB.386))
dim(exprs(esets.rescaled.classified.filteredgenes$GSE14764))
